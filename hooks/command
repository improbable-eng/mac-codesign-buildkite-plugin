#!/usr/bin/env bash
#
# Now that we have a valid codesigning environment, sign the code.
# 1. Retrieve the unsigned binary from the BK artifact store
# 2. Retrieve the keychain unlock password from Vault
# 3. Unlock the keychain
# 4. Sign the binary and validate the signature

set -e -o pipefail
[[ -n "${DEBUG-}" ]] && set -x

DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"

# shellcheck source=lib/shared.sh
source "${DIR}/../lib/shared.sh"

keychain_pw_name="${BUILDKITE_PLUGIN_MAC_CODESIGN_KEYCHAIN_PW_SECRET_NAME}"
codesigning_keychain="${BUILDKITE_PLUGIN_MAC_CODESIGN_KEYCHAIN}"
script_root_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
default_keychain_pw_helper_script="${script_root_dir}/../helpers/fetch-keychain-pw.sh"

# Fetch the artifact and put it in the target dir
function fetch_artifact {
  fetch_target="${1}"
  dest_dir="${2}"
  buildkite-agent artifact download "${fetch_target}" "${dest_dir}"
  retval=$?
  if [[ "${retval}" -ne 0  ]]; then
    echo "Unable to download the specified artifact '${fetch_target}' with error code '${retval}'"
    exit 1
  fi

  echo "${dest_dir}/${fetch_target}"
}

# If the unlock secret was not supplied as an env var, call the helper script to fetch it
function get_keychain_pw {
  helper_script_path="${1}"
  helper_script_arg="${2}"
  if [[ -z "${KEYCHAIN_PW}" ]]; then
    KEYCHAIN_PW="$(${helper_script_path} ${helper_script_arg})"
    retval=$?
    if [[ "${retval}" -ne 0 || -z "${KEYCHAIN_PW}"  ]]; then
      echo "Unable the fetch the secret using the helper script: error code '${retval}'"
      exit 2
    fi
  fi

  echo "${KEYCHAIN_PW}"
}

# Now unlock the keychain and find the identity to sign with
function unlock_keychain {
  keychain_name=${1}
  keychain_pw=${2}
  security unlock-keychain -p "${keychain_pw}" "${keychain_name}"
  retval=$?
  if [[ "${retval}" -ne 0  ]]; then
    echo "Unable to unlock the requested keychain '${keychain_name}': error code '${retval}'"
    exit 3
  fi
}

function get_signing_identity {
  # This is awful, but we need to get some portion of the identity out of the keychain, and there's no clean way to do it.
  security find-identity ${codesign_keychain} | grep -A1 "Valid identities" | tail -1 | awk '{print $2}'
}

# Sign the binary
function sign_and_validate {
  signing_target="${1}"
  identity="${2}"

  codesign --verify --verbose --display --deep -s "${identity}" "${signing_target}"
  retval=$?
  if [[ "${retval}" -ne 0  ]]; then
    echo "codesigning of target '${signing_target}' failed: error code '${retval}'"
    exit 4
  fi

  codesign --verify --deep --strict "${signing_target}"
  retval=$?
  if [[ "${retval}" -ne 0  ]]; then
    echo "Unable to verify that '${signing_target}' has a valid code signature: error code '${retval}'"
    exit 5
  fi

  # Copy the signed binary to where it's expected to be for artifact uploading.
  cp "${signing_target}" "${signing_target}_signed"
}

function upload_artifact {
  signed_artifact="${1}"
  # The pushd/popd/dirname/basename shenanigans are so the artifact path in BK is friendlier
  pushd $(dirname ${signed_artifact})
  buildkite-agent artifact upload $(basename ${signed_artifact})
  retval=$?
  popd
  if [[ "${retval}" -ne 0  ]]; then
    echo "Unable to upload ${signed_artifact} to BuildKite: error code '${retval}'"
    exit 6
  fi
}

# If the user set a secret-fetch helper script, use it, otherwise use the default.
function find_keychain_pw_helper_script {
  if [[ -n "${BUILDKITE_PLUGIN_MAC_CODESIGN_KEYCHAIN_PW_HELPER_SCRIPT}" ]]; then
    script="${BUILDKITE_PLUGIN_MAC_CODESIGN_KEYCHAIN_PW_HELPER_SCRIPT}"
  else
    script="${default_keychain_pw_helper_script}"
  fi

  echo "${script}"
}

## Main execution flow

# Set everything up to be able to sign.
echo "--- Getting the password to unlock the keychain"
keychain_pw_helper_script=$(find_keychain_pw_helper_script)
keychain_pw=$(get_keychain_pw "${keychain_pw_helper_script}" "${keychain_pw_name}")

echo "--- Unlocking the keychain"
unlock_keychain "${codesigning_keychain}" "${keychain_pw}"

echo "--- Finding the code signing identity in the unlocked keychain"
identity=$(get_signing_identity "${BUILDKITE_PLUGIN_MAC_CODESIGN_KEYCHAIN}")

# Sign things in a local dir so the uploaded artifacts don't have a weird path
artifacts_dir="$(pwd)/signed"
rm -rf "${artifacts_dir}" && mkdir -p "${artifacts_dir}"

# Download and sign each requested artifact
for artifact in $(plugin_read_list INPUT_ARTIFACTS) ; do
  echo "--- ${artifact}: retrieving unsigned artifact"
  unsigned_artifact="$(fetch_artifact ${artifact} ${artifacts_dir})"

  echo "--- ${artifact}: signing binary"
  signed_artifact="$(sign_and_validate "${unsigned_artifact}" "${identity}")"

  echo "--- ${artifact}: uploading signed artifact"
  upload_artifact "${unsigned_artifact}"
done
