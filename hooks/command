#!/usr/bin/env bash
#
# Actually signs the package.
# 1. Retrieve the unsigned binary from the BK artifact store
# 2. Retrieve the keychain unlock password
# 3. Unlock the keychain
# 4. Sign the binary and validate the signature
# 5. Upload the binary as a BuildKite artifact

set -o errexit -o nounset -o pipefail
[[ -n "${DEBUG-}" ]] && set -x

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# shellcheck source=lib/shared.sh
source "${DIR}/../lib/shared.sh"

codesigning_keychain="${BUILDKITE_PLUGIN_MAC_CODESIGN_KEYCHAIN}"
script_root_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
default_keychain_pw_helper_script="${script_root_dir}/../helpers/fetch-keychain-pw.sh"

# Fetch the artifact and put it in the target dir
# Params:
#   fetch_target: Name of the BuildKite artifact to fetch
#   dest_dir: Where to download it to.
function fetch_artifact() {
  local fetch_target="${1}"
  local dest_dir="${2}"

  buildkite-agent artifact download "${fetch_target}" "${dest_dir}"
  retval=$?
  if [[ "${retval}" -ne 0 ]]; then
    echo "Unable to download the specified artifact '${fetch_target}' with error code '${retval}'"
    exit 1
  fi

  echo "${dest_dir}/${fetch_target}"
}

# If the unlock secret was not supplied as an env var, call the helper script to fetch it
# Params:
#   helper_script_path: Path to a script to run that returns the keychain PW.
#   rest: Any arguments that need to be passed to the helper script.
function get_keychain_pw() {
  local helper_script_path="${1}"

  if [[ -z "${KEYCHAIN_PW:-}" ]]; then
    KEYCHAIN_PW="$("${helper_script_path}" "${@:2}")"
    retval=$?
    if [[ "${retval}" -ne 0 || -z "${KEYCHAIN_PW}" ]]; then
      echo "Unable the fetch the secret using the helper script: error code '${retval}'"
      exit 2
    fi
  fi

  echo "${KEYCHAIN_PW}"
}

# Now unlock the keychain and find the identity to sign with
# Params:
#   keychain_name: The name of an existing, accessible macos Keychain containing one signing certificate.
#   keychain_pw: The password to unlock this keychain.
function unlock_keychain() {
  local keychain_name=${1}
  local keychain_pw=${2}

  security unlock-keychain -p "${keychain_pw}" "${keychain_name}"
  retval=$?
  if [[ "${retval}" -ne 0 ]]; then
    echo "Unable to unlock the requested keychain '${keychain_name}': error code '${retval}'"
    exit 3
  fi
}

# Generate gon config for signing+notarization
# Params:
#   prerequisites: variable stub to get list of prerequisites from YAML definition
#   entitlements: path to entitlements file (ignored if empty)
#   absolute_artifacts_dir: root path to artifacts
#   config_path: path to write gon config file to
function generate_signing_config() {
  local prerequisites="${1}"
  local entitlements="${2}"
  local absolute_artifacts_dir="${3}"
  local config_path="${4}"

  jq -n \
    --arg bundle_id "${BUILDKITE_PLUGIN_MAC_CODESIGN_TOOL_BUNDLE_ID}" \
    --arg apple_user_email "${BUILDKITE_PLUGIN_MAC_CODESIGN_APPLE_USER_EMAIL}" \
    --arg identity "${BUILDKITE_PLUGIN_MAC_CODESIGN_CERT_IDENTITY}" \
    '{
      "source": [],
      "bundle_id": $bundle_id,
      "apple_id": {
        "username": $apple_user_email,
        "password": "@keychain:apple_password",
      },
      "sign": {
        "application_identity": $identity,
      },
    }' >"${config_path}"

  echo "${prerequisites}" | while read -r prereq; do
    # iterate over prerequisites, adding them to the codesign config
    local config
    config="$(jq --arg toSign "${absolute_artifacts_dir}/${prereq}" '.source += [$toSign]' "${config_path}")"
    echo "${config}" >"${config_path}"
  done

  if [[ -n "${entitlements}" ]]; then
    # if entitlements specified, add them to config.
    local config
    config="$(jq --arg entitlements "${entitlements}" '.sign.entitlements_file = $entitlements' "${config_path}")"
    echo "${config}" >"${config_path}"
  fi
}

# Convenience wrapper to upload our signed artifact to BuildKite
# Params:
#   artifact: Path of a file to upload to BuildKite as an artifact.
function upload_artifact() {
  local artifact="${1}"

  buildkite-agent artifact upload "${artifact}"
  retval=$?
  if [[ "${retval}" -ne 0 ]]; then
    echo "Unable to upload ${artifact} to BuildKite: error code '${retval}'"
    exit 6
  fi
}

# Allow the user to override the default keychain pw retrieval helper script.
function find_keychain_pw_helper_script() {
  local script
  script="${BUILDKITE_PLUGIN_MAC_CODESIGN_KEYCHAIN_PW_HELPER_SCRIPT:-default_keychain_pw_helper_script}"
  fi

  echo "${script}"
}

## Main execution flow

# Set everything up to be able to sign.
echo "--- Getting the password to unlock the keychain"
keychain_pw_helper_script=$(find_keychain_pw_helper_script)
keychain_pw=$(get_keychain_pw "${keychain_pw_helper_script}")

#echo "--- Unlocking the keychain"
unlock_keychain "${codesigning_keychain}" "${keychain_pw}"

echo "--- Setting up local directories"
# Download things in a local dir to identify them
artifact_dir_fragment="artifacts"
rm -rf "${artifact_dir_fragment}" && mkdir -p "${artifact_dir_fragment}"
absolute_artifacts_dir="$(pwd)/${artifact_dir_fragment}"

## Download each requested artifact
plugin_read_list INPUT_ARTIFACTS | while read -r artifact; do
  echo "${artifact}: retrieving unsigned artifact"
  fetch_artifact "${artifact}" "${absolute_artifacts_dir}"
done

entitlements="${BUILDKITE_PLUGIN_MAC_CODESIGN_ENTITLEMENTS}"
if [[ -n "${entitlements}" ]]; then
  fetch_artifact "${entitlements}" "${absolute_artifacts_dir}"
  entitlements="${absolute_artifacts_dir}/${entitlements}"
fi

config_path="config.json"
prerequisites="$(plugin_read_list SIGN_PREREQUISITES)"

# generate config
echo "-- Generating signing config"
generate_signing_config "${prerequisites}" "${entitlements}" "${absolute_artifacts_dir}" "${config_path}"

echo "-- Executing gon on generated config"
gon "${config_path}"
retval=$?
if [[ "${retval}" -ne 0 ]]; then
  echo "notarization failed: error code '${retval}'"
  exit 5
fi

echo "--- Uploading output artifacts"
# upload config
echo "${config_path}: uploading config used"
upload_artifact "${config_path}"

# upload signed items
plugin_read_list OUTPUT_ARTIFACTS | while read -r artifact; do
  echo "${artifact}: uploading signed artifact"
  upload_artifact "${absolute_artifacts_dir}/${artifact}"
done
