#!/usr/bin/env bash
#
# This script validates the environment needed to perform code signing.
# 1. Ensure that the requested keychain exists
# 2. Validate that this job is allowed to proceed with codesigning tasks.

set -o errexit -o nounset -o pipefail
[[ -n "${DEBUG-}" ]] && set -x

permitted_signing_host="127.0.0.1"
codesign_keychain="${BUILDKITE_PLUGIN_MAC_CODESIGN_KEYCHAIN}"

if [[ -z "${codesign_keychain}" ]]; then
  echo "A signing keychain must be specified."
  exit 6
fi

if ! security list-keychains | grep "${codesign_keychain}" > /dev/null; then
  echo "Unable to find/read specified signing keychain ${codesign_keychain}"
  exit 1
fi

if [[ "$codesign_keychain" != *.keychain ]]; then
  echo "keychain does not end with .keychain suffix"
  exit 1
fi

# Verify that this is only running on MacOS, via BuildKite, in proper CI, on our blessed agent.
if [[ "${BUILDKITE}" != "true" ]]; then
  echo "Code signing can only be done as part of a BuildKite pipeline."
  exit 2
fi

if [[ "${BUILDKITE_SOURCE}" == "local" ]]; then
  echo "Code signing is not allowed to be done locally."
  exit 3
fi

if [[ "${BUILDKITE_AGENT_META_DATA_PLATFORM}" != "macos" ]]; then
  echo "Code signing of macOS binaries can only be performed on macos, not ${BUILDKITE_AGENT_META_DATA_PLATFORM}."
  exit 4
fi

if [[ -z "${BUILDKITE_PLUGIN_MAC_CODESIGN_APPLE_USER_EMAIL}" ]]; then
  echo "The user email to notarize the tool with must be specified."
  exit 7
fi

if [[ -z "${BUILDKITE_PLUGIN_MAC_CODESIGN_TOOL_BUNDLE_ID}" ]]; then
  echo "A tool bundle_id must be specified."
  exit 8
fi
